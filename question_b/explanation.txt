In order to shorten the execution time, we need to reduce the amount of redundancy data.
in the original query, it cames with complex Joins, db engine will attempt to join multiple tables and handle large result set, thus could be leading to slow execution time.
thus we need to pre-filter out <jobs> table id before we fetch output data.

Based on the query logic, I am pre-assuming it can be splited into 3 parts of filter:
1. Jobs that are based on <affiliates> name column, it used LEFT JOIN, thus assuming some jobs are only related to certain <affiliates>
2. Jobs' attributes which are <personalities>, <practical_skills>, <basic_abilities>, it used LEFT JOIN, thus assuming some job may not have certain attributes
3. Categories and types of jobs, it used INNER JOIN, thus assuming every job must have a category and type

By utilizing common table expressions, we can "pre-filter" <jobs>'s id by splitting the query into few smaller queries before we start to retrieve the actual table data.
In the end of query, by using UNION join to eliminate possible duplicated ids and finally fetch the final result set.
